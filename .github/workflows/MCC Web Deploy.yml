name: MCC Web Deploy
 
# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    inputs:
      tags:
        description: 'Prod image tag'
  push:
    paths-ignore:
      - 'mobile/**'
      - 'web/package.json'
  create:
 
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  WebTest:
    if: |
      ((github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'pull_request'))
        || (github.event_name == 'workflow_dispatch' && github.ref != 'refs/heads/main'))
        || (github.event_name == 'create' && contains(github.ref, 'refs/heads/releases/'))
    uses: ./.github/workflows/web-unit-tests.yml
 
  BumpVersion:
    runs-on: ubuntu-latest
    needs: WebTest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_ADMIN_PAT }}
 
      - name: 'Automated Version Bump'
        if: github.event_name != 'create'
        id: version-bump
        continue-on-error: true
        uses: 'mclm-innersource/version-bump@main'
        with:
          skip-tag: 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ADMIN_PAT }}
          PACKAGEJSON_DIR: 'web'
 
        #if collide with another bump, get latest code and try again
      - name: Try push again
        id: refresh
        if: steps.version-bump.outcome=='failure' && github.event_name != 'create'
        run: |
          git config pull.rebase true
          git pull
          git push
 
  # This workflow contains a single job to build image
  Build:
    needs: BumpVersion
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment:
      name: dev
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Check out code
      - name: Checkout
        uses: actions/checkout@v2
 
      - name: Use Node.js v16
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
 
      - name: Set image name n tag
        run: |
          export TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          export IMAGE=us-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mclm-docker-repo-us/expo-web-ui:$TIMESTAMP
          echo "IMAGE_NAME=$IMAGE" >> $GITHUB_ENV
          echo "TAG=$TIMESTAMP" >> $GITHUB_ENV
 
      - uses: google-github-actions/setup-gcloud@v0
        with:
          service_account_key: ${{ secrets.GCP_DEVOPS_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true
 
      - run: |
          gcloud auth configure-docker us-docker.pkg.dev --quiet
 
      - name: Build the Docker image
        run: docker build -t ${{env.IMAGE_NAME}} -t us-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mclm-docker-repo-us/expo-web-ui:latest .
 
      - name: push image
        run: docker push -a us-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mclm-docker-repo-us/expo-web-ui
 
  DeployDev:
    needs: Build
    if: github.event_name != 'create'
    uses: ./.github/workflows/mcc-deploy.yml
    with:
      environment: dev
      docker-image-tag: latest
    secrets:
      GCP_DEVOPS_SERVICE_ACCOUNT_KEY: ${{secrets.GCP_DEVOPS_SERVICE_ACCOUNT_KEY}}
      GCP_PROJECT_ID: ${{secrets.GCP_PROJECT_ID}}
      SERVICE: ${{secrets.SERVICE}}
      REGION: ${{secrets.REGION}}
 
  DevFunctionalTests:
    needs: DeployDev
    name: Dev Functional Tests
    uses: ./.github/workflows/web-functional-tests.yml
    with:
      run-tests: true
      environment: dev
      working-directory: testbed
      checkout-first: true
      run-chrome-tests: true
      run-firefox-tests: true
      run-safari-tests: true
    secrets:
      PERFECT_FAIL_TEST_IF_DEVICE_UNAVAILABLE: ${{ secrets.PERFECT_FAIL_TEST_IF_DEVICE_UNAVAILABLE }}
      WEB_BASE_URL: ${{ secrets.WEB_BASE_URL }}
      PERFECTO_TOKEN: ${{ secrets.PERFECTO_TOKEN }}
      PERFECTO_CLOUD_NAME: ${{ secrets.PERFECTO_CLOUD_NAME }}
 
  DevAccessibilityTests:
    needs: DeployDev
    name: Dev Accessibility Tests
    uses: ./.github/workflows/web-accessibility-tests.yml
    with:
      run-tests: true
      environment: dev
      working-directory: testbed
      checkout-first: true
    secrets:
      ACCESSIBILITY_TESTS_FILE: ${{ secrets.ACCESSIBILITY_TESTS_FILE }}
      PERFECTO_TOKEN: ${{ secrets.PERFECTO_TOKEN }}
      PERFECTO_CLOUD_NAME: ${{ secrets.PERFECTO_CLOUD_NAME }}
 
  DevPerformanceTests:
    needs: DeployDev
    name: Dev Performance Tests
    uses: ./.github/workflows/web-performance-tests.yml
    with:
      run-tests: true
      environment: dev
      working-directory: testbed
      checkout-first: true
    secrets:
      BLAZEMETER_API_KEY: ${{ secrets.BLAZEMETER_API_KEY }}
      BLAZEMETER_API_SECRET: ${{ secrets.BLAZEMETER_API_SECRET }}
      BLAZEMETER_TEST_ID: ${{ secrets.BLAZEMETER_TEST_ID }}
 
  # TODO: Since we're always deploying the latest docker image, this deploy
  #       could push the latest from a feature branch.  We should change this
  #       to push latest from main to test.
  DeployTest:
    name: Deploy to Test
    if: github.event_name == 'create'
    needs: Build
    uses: ./.github/workflows/mcc-deploy.yml
    with:
      environment: test
      docker-image-tag: latest
    secrets:
      GCP_DEVOPS_SERVICE_ACCOUNT_KEY: ${{secrets.GCP_DEVOPS_SERVICE_ACCOUNT_KEY}}
      GCP_PROJECT_ID: ${{secrets.GCP_PROJECT_ID}}
      SERVICE: ${{secrets.SERVICE}}
      REGION: ${{secrets.REGION}}
 
  TestFunctionalTests:
    needs: DeployTest
    name: Test Functional Tests
    uses: ./.github/workflows/web-functional-tests.yml
    with:
      run-tests: true
      environment: test
      working-directory: testbed
      checkout-first: true
      run-chrome-tests: true
      run-firefox-tests: true
      run-safari-tests: true
    secrets:
      PERFECT_FAIL_TEST_IF_DEVICE_UNAVAILABLE: ${{ secrets.PERFECT_FAIL_TEST_IF_DEVICE_UNAVAILABLE }}
      WEB_BASE_URL: ${{ secrets.WEB_BASE_URL }}
      PERFECTO_TOKEN: ${{ secrets.PERFECTO_TOKEN }}
      PERFECTO_CLOUD_NAME: ${{ secrets.PERFECTO_CLOUD_NAME }}
 
  TestAccessibilityTests:
    needs: DeployTest
    name: Test Accessibility Tests
    uses: ./.github/workflows/web-accessibility-tests.yml
    with:
      run-tests: true
      environment: test
      working-directory: testbed
      checkout-first: true
    secrets:
      ACCESSIBILITY_TESTS_FILE: ${{ secrets.ACCESSIBILITY_TESTS_FILE }}
      PERFECTO_TOKEN: ${{ secrets.PERFECTO_TOKEN }}
      PERFECTO_CLOUD_NAME: ${{ secrets.PERFECTO_CLOUD_NAME }}
 
  TestPerformanceTests:
    needs: DeployTest
    name: Test Performance Tests
    uses: ./.github/workflows/web-performance-tests.yml
    with:
      run-tests: true
      environment: test
      working-directory: testbed
      checkout-first: true
    secrets:
      BLAZEMETER_API_KEY: ${{ secrets.BLAZEMETER_API_KEY }}
      BLAZEMETER_API_SECRET: ${{ secrets.BLAZEMETER_API_SECRET }}
      BLAZEMETER_TEST_ID: ${{ secrets.BLAZEMETER_TEST_ID }}
 
  ChangeApproval:
    name: ServiceNow Change Approval
    runs-on: ubuntu-latest
    steps:
      - name: ServiceNow Change
        if: github.event_name == 'workflow_dispatch' && inputs.tags != ''
        uses: ServiceNow/servicenow-devops-change@v1.34.2
        with:
          devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Deploy'
          change-request: '{"setCloseCode":"true","attributes":{"short_description":"Automated Software Deployment","description":"Automated Software Deployment.","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'
          interval: '100'
          timeout: '3600'
  DeployProd:
    name: Deploy to Prod
    needs: ChangeApproval
    uses: ./.github/workflows/mcc-deploy.yml
    with:
      environment: prod
      docker-image-tag: ${{ github.event.inputs.tags }}
    secrets:
      GCP_DEVOPS_SERVICE_ACCOUNT_KEY: ${{secrets.GCP_DEVOPS_SERVICE_ACCOUNT_KEY}}
      GCP_PROJECT_ID: ${{secrets.GCP_PROJECT_ID}}
      SERVICE: ${{secrets.SERVICE}}
      REGION: ${{secrets.REGION}}
 
  ProdFunctionalTests:
    needs: DeployProd
    name: Prod Functional Tests
    uses: ./.github/workflows/web-functional-tests.yml
    with:
      run-tests: true
      environment: prod
      working-directory: testbed
      checkout-first: true
      run-chrome-tests: true
      run-firefox-tests: true
      run-safari-tests: true
    secrets:
      PERFECT_FAIL_TEST_IF_DEVICE_UNAVAILABLE: ${{ secrets.PERFECT_FAIL_TEST_IF_DEVICE_UNAVAILABLE }}
      WEB_BASE_URL: ${{ secrets.WEB_BASE_URL }}
      PERFECTO_TOKEN: ${{ secrets.PERFECTO_TOKEN }}
      PERFECTO_CLOUD_NAME: ${{ secrets.PERFECTO_CLOUD_NAME }}
 
  ProdAccessibilityTests:
    needs: DeployProd
    name: Prod Accessibility Tests
    uses: ./.github/workflows/web-accessibility-tests.yml
    with:
      run-tests: true
      environment: prod
      working-directory: testbed
      checkout-first: true
    secrets:
      ACCESSIBILITY_TESTS_FILE: ${{ secrets.ACCESSIBILITY_TESTS_FILE }}
      PERFECTO_TOKEN: ${{ secrets.PERFECTO_TOKEN }}
      PERFECTO_CLOUD_NAME: ${{ secrets.PERFECTO_CLOUD_NAME }}
 
  ProdPerformanceTests:
    needs: DeployProd
    name: Prod Performance Tests
    uses: ./.github/workflows/web-performance-tests.yml
    with:
      run-tests: true
      environment: prod
      working-directory: testbed
      checkout-first: true
    secrets:
      BLAZEMETER_API_KEY: ${{ secrets.BLAZEMETER_API_KEY }}
      BLAZEMETER_API_SECRET: ${{ secrets.BLAZEMETER_API_SECRET }}
      BLAZEMETER_TEST_ID: ${{ secrets.BLAZEMETER_TEST_ID }}
