name: workflow-ci

on:
  push:
    branches:
      - workflow
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  AZURE_WEBAPP_DEV_NAME: samples-app-dev    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '14.x'                # set this to the node version to use

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: samples-app/package-lock.json

    - name: npm install.
      run: npm install
      working-directory: ./samples-app
     
    - name: sonarqube-scanner install.
      run: npm install -g sonarqube-scanner

    - name: npm build.
      run: npm run clean && npm run build --if-present
      working-directory: ./samples-app
    
    - name: npm test.
      run: npm run test --if-present
      working-directory: ./samples-app
      
    - name: convert to junit xml
      run: npm run junitxml
      working-directory: ./samples-app
      
    # - name: Publish JUnit Test Results
    #   uses: EnricoMi/publish-unit-test-result-action@v1
    #   if: always()
    #   with:
    #     files: "**/testResults.xml"
    
    - name: ServiceNow DevOps Unit Test Results
      uses: ServiceNow/servicenow-devops-test-report@v1.34.2
      with:
        devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
        devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
        instance-url: ${{ secrets.SN_INSTANCE_URL }}
        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        context-github: ${{ toJSON(github) }}
        job-name: 'Build'
        xml-report-filename: './samples-app/reports/'

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: samples-app
        path: ./samples-app/dist/samples-app
  
  registerArtifact:
    name: 'Register Artifact'
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Register Artifact
      shell: bash
      run : echo "Register Artifact to ServiceNow"
        
    - name: ServiceNow Register Artifact
      uses: ServiceNow/servicenow-devops-register-artifact@v1.34.2
      with:
        devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
        devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
        instance-url: ${{ secrets.SN_INSTANCE_URL }}
        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        context-github: ${{ toJSON(github) }}
        job-name:  'Register Artifact'
        artifacts: '[{"name": "samples-app.zip","version": "1.${{ github.run_number }}","semanticVersion": "1.${{ github.run_number }}.0","repositoryName": "${{ github.repository }}"}]'

  runSonarQube:
    name: 'Run SonarQube' 
    runs-on: ubuntu-latest
    needs: registerArtifact
    steps:
    - uses: actions/checkout@v3
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        
    - name: SonarCloud Scan
      run: sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.organization=$SONAR_ORG_KEY -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.branch.name=workflow
      
    - name: Store Scan Tests Results
      shell: bash
      run : echo "Store Scan Tests Results in ServiceNow"
      
    - name: ServiceNow DevOps Sonar Scan Results
      uses: ServiceNow/servicenow-devops-sonar@v1.34.2
      with:
          devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          job-name: 'Build'
          context-github: ${{ toJSON(github) }}
          sonar-host-url: ${{ secrets.SONAR_HOST_URL }}
          sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}
              
  registerPackage:
    name: 'Register Package'
    runs-on: ubuntu-latest
    needs: runSonarQube
    steps:
    - name: Register Package to ServiceNow
      shell: bash
      run : |
        echo "Register Package to ServiceNow"
    - name: ServiceNow Register Package
      uses: ServiceNow/servicenow-devops-register-package@v1.34.2
      with:
        devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
        devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
        instance-url: ${{ secrets.SN_INSTANCE_URL }}
        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        context-github: ${{ toJSON(github) }}
        job-name: 'Register Package'
        artifacts: '[{"name": "samples-app.zip","version": "1.${{ github.run_number }}","semanticVersion": "1.${{ github.run_number }}.0","repositoryName": "${{ github.repository }}"}]'
        package-name: 'samples-package'

  approveChangeRequest:
    name: 'Approve Change Request'
    runs-on: ubuntu-latest
    needs: registerPackage
    steps:
    - name: Approve Change Request in ServiceNow
      shell: bash
      run : echo "Approve Change Request in ServiceNow"
      
    - name: ServiceNow Change
      uses: ServiceNow/servicenow-devops-change@v1.34.2
      with:
        devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
        devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
        instance-url: ${{ secrets.SN_INSTANCE_URL }}
        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
        context-github: ${{ toJSON(github) }}
        job-name: 'Approve Change Request'
        change-request: '{"setCloseCode":"false","attributes":{"short_description":"Application deployment for samples-dev","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'
        interval: '100'
        timeout: '3600'

